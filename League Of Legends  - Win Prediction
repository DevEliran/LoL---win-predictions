{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"League Of Legends  - Win Prediction","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP7/LE5x4Tt8K4TURM9x80b"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"H6OSoNtrbAqs","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592836036646,"user_tz":-180,"elapsed":5045,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["!pip install -q sklearn"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"oXLfehambz8X","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592836185775,"user_tz":-180,"elapsed":6118,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["pip install -q tensorflow>=2 tfds-nightly matplotlib"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"gW9KeZgzbMU6","colab_type":"code","colab":{}},"source":["%tensorflow_version 2.x  # this line is not required unless you are in a notebook"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nqaHTsQHdnXM","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592836658824,"user_tz":-180,"elapsed":4056,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["# Colab library to upload files to notebook\n","from google.colab import files\n","\n","# Install Kaggle library\n","!pip install -q kaggle"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"BA-LoR3td1yu","colab_type":"code","colab":{}},"source":["\n","# Upload kaggle API key file\n","uploaded = files.upload()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aYGJdceTegSY","colab_type":"code","colab":{}},"source":["!mkdir ~/.kaggle\n","!cp /content/kaggle.json ~/.kaggle/kaggle.json"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f3R-ZrDxfeM0","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837148710,"user_tz":-180,"elapsed":2330,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["!chmod 600 /root/.kaggle/kaggle.json "],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"TbUh3DOleNdp","colab_type":"code","colab":{}},"source":["!!kaggle datasets download -d gyejr95/league-of-legends-challenger-ranked-games2020\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5pdNNUepfzr5","colab_type":"code","colab":{}},"source":["!ls"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iWU38YgDbMsg","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592841314998,"user_tz":-180,"elapsed":1028,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["from __future__ import absolute_import, division, print_function, unicode_literals\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from IPython.display import clear_output\n","from six.moves import urllib\n","import tensorflow.compat.v2.feature_column as fc\n","import tensorflow as tf\n","import pandas as pd\n","from zipfile import ZipFile\n","import seaborn as sns\n","%matplotlib inline\n","sns.set_style('darkgrid')"],"execution_count":72,"outputs":[]},{"cell_type":"code","metadata":{"id":"7805RAYAoPZT","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592842010213,"user_tz":-180,"elapsed":1686,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["zip_file = ZipFile('league-of-legends-challenger-ranked-games2020.zip')\n","\n","dfs = {text_file.filename: pd.read_csv(zip_file.open(text_file.filename))\n","       for text_file in zip_file.infolist()\n","       if text_file.filename.endswith('.csv')}\n","      \n","# Import the test and train datasets into pandas dataframe\n","df_train_challenger = dfs['Challenger_Ranked_Games.csv']\n","df_test_challenger = dfs['Challenger_Ranked_Games.csv']"],"execution_count":95,"outputs":[]},{"cell_type":"code","metadata":{"id":"MSb_kZZuqwrZ","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592842012187,"user_tz":-180,"elapsed":980,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["challenger_train = df_train_challenger[[\"blueWins\"]]\n","challenger_test = df_test_challenger[[\"blueWins\"]]\n","\n","# challenger_train_blue = df_train_challenger.pop(\"blueWins\")\n","# challenger_train_red = df_train_challenger.pop(\"redWins\")\n","\n","\n","# challenger_test_blue = df_test_challenger.pop(\"blueWins\")\n","# challenger_test_red = df_test_challenger.pop(\"redWins\")"],"execution_count":96,"outputs":[]},{"cell_type":"code","metadata":{"id":"3ekmDmwpo2XP","colab_type":"code","colab":{}},"source":["df_test_challenger.pop(\"gameId\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sZrYaw97j2LS","colab_type":"code","colab":{}},"source":["df_train_challenger.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9HZK__d1lXPg","colab_type":"code","colab":{}},"source":["challenger_train.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZOXmVOKggMQk","colab_type":"code","colab":{}},"source":["df_train_challenger.describe()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K6C1lu6-jZXO","colab_type":"code","colab":{}},"source":["df_train_challenger.gameDuraton.hist(bins=50)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZPIby1gxlsiI","colab_type":"code","colab":{}},"source":["df_train_challenger.blueFirstBlood.value_counts().plot(kind='barh')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fsIL3sF3l5rW","colab_type":"code","colab":{}},"source":["df_train_challenger.blueFirstDragon.value_counts().plot(kind='barh')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J6HMXJnrmFmZ","colab_type":"code","colab":{}},"source":["df_train_challenger.blueWardPlaced.hist(bins=50)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nk4EjR1YmNPX","colab_type":"code","colab":{}},"source":["pd.concat([df_train_challenger, challenger_train], axis=1).groupby('blueFirstTower').blueWins.mean().plot(kind='barh').set_xlabel('% Blue Won')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I-xb9iaCmhfB","colab_type":"code","colab":{}},"source":["pd.concat([df_train_challenger, challenger_train], axis=1).groupby('blueFirstBaron').blueWins.mean().plot(kind='barh').set_xlabel('% Blue Won')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ygybGXXCqaYY","colab_type":"code","colab":{}},"source":["blue_corr = df_train_challenger.corr()['blueWins'][:].sort_values(axis=0, ascending=False) \n","red_corr = df_train_challenger.corr()['redWins'][:].sort_values(axis=0, ascending=False) \n","# pearson method normalizes values for me\n","print(blue_corr)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UnbNcCpGmyuo","colab_type":"code","colab":{}},"source":["corr_cols = [prop for prop,corr in blue_corr.iteritems() if abs(corr)>0.3]\n","plt.figure(figsize=(26,26))\n","sns.set(font_scale = 1)\n","sns.heatmap(df_train_challenger[corr_cols].corr(), annot=True, linewidths=.5, linecolor='black', cmap=\"BuPu\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OQ2KKriYoluW","colab_type":"code","colab":{}},"source":["corr_cols_2 = [prop for prop,corr in blue_corr.iteritems() if abs(corr)>0.5]\n","plt.figure(figsize=(12,12))\n","sns.set(font_scale = 1)\n","sns.heatmap(df_train_challenger[corr_cols_2].corr(), annot=True, linewidths=.5, linecolor='black', cmap=\"BuPu\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oM1dpgBPtfO7","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592842030146,"user_tz":-180,"elapsed":568,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):\n","  def input_function():  # inner function, this will be returned\n","    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))  # create tf.data.Dataset object with data and its label\n","    if shuffle:\n","      ds = ds.shuffle(1000)  # randomize order of data\n","    ds = ds.batch(batch_size).repeat(num_epochs)  # split dataset into batches of 32 and repeat process for number of epochs\n","    return ds  # return a batch of the dataset\n","  return input_function  # return a function object for use\n","\n","train_input_fn = make_input_fn(df_train_challenger, challenger_train)  # here we will call the input_function that was returned to us to get a dataset object we can feed to the model\n","eval_input_fn = make_input_fn(df_test_challenger, challenger_test, num_epochs=1, shuffle=False)"],"execution_count":98,"outputs":[]},{"cell_type":"code","metadata":{"id":"VyT2Rrlsw5P2","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592842033484,"user_tz":-180,"elapsed":926,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}}},"source":["feature_columns = []\n","for feature_name in corr_cols_2:\n","  feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))"],"execution_count":99,"outputs":[]},{"cell_type":"code","metadata":{"id":"1enh-dlfzQfI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":222},"executionInfo":{"status":"ok","timestamp":1592842341185,"user_tz":-180,"elapsed":1982,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}},"outputId":"101b3538-a6a9-4fec-9ade-eba996d125c2"},"source":["print(feature_columns)"],"execution_count":103,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[NumericColumn(key='blueWins', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='blueTowerKills', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='blueFirstInhibitor', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='blueInhibitorKills', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='blueObjectDamageDealt', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='redInhibitorKills', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='redObjectDamageDealt', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='redFirstInhibitor', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='redTowerKills', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None),\n"," NumericColumn(key='redWins', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None)]"]},"metadata":{"tags":[]},"execution_count":102},{"output_type":"stream","text":["[NumericColumn(key='blueWins', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='blueTowerKills', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='blueFirstInhibitor', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='blueInhibitorKills', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='blueObjectDamageDealt', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='redInhibitorKills', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='redObjectDamageDealt', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='redFirstInhibitor', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='redTowerKills', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='redWins', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tmIBPuJsvXt-","colab_type":"code","colab":{}},"source":["linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yguZ7RknwGC4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592842068265,"user_tz":-180,"elapsed":28854,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}},"outputId":"5dfb9ec5-e065-4397-a2d0-319101c3e2a3"},"source":["linear_est.train(train_input_fn)  # train\n","result = linear_est.evaluate(eval_input_fn)  # get model metrics/stats by testing on tetsing data\n","\n","clear_output()\n","print(result['accuracy'])  # the result variable is simply a dict of stats about our model"],"execution_count":101,"outputs":[{"output_type":"stream","text":["0.953204\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MFMUQTmI03KU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":339},"executionInfo":{"status":"ok","timestamp":1592842765718,"user_tz":-180,"elapsed":870,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}},"outputId":"3d319400-99bf-43e1-bf02-c828094f06f2"},"source":["# Build a DNN with 2 hidden layers with 30 and 10 hidden nodes each.\n","classifier = tf.estimator.DNNClassifier(\n","    feature_columns=feature_columns,\n","    # Two hidden layers of 30 and 10 nodes respectively.\n","    hidden_units=[30, 10],\n","    # The model must choose between 3 classes.\n","    n_classes=2)"],"execution_count":109,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Using default config.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Using default config.\n"],"name":"stderr"},{"output_type":"stream","text":["WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpfms1kres\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpfms1kres\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpfms1kres', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n","graph_options {\n","  rewrite_options {\n","    meta_optimizer_iterations: ONE\n","  }\n","}\n",", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpfms1kres', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n","graph_options {\n","  rewrite_options {\n","    meta_optimizer_iterations: ONE\n","  }\n","}\n",", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"ax1-_Xr2zMtr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":790},"executionInfo":{"status":"error","timestamp":1592842833587,"user_tz":-180,"elapsed":5847,"user":{"displayName":"eliran turgeman","photoUrl":"","userId":"03637329676849161483"}},"outputId":"346b216b-8552-4e01-fc88-1b12b5498b09"},"source":["def input_fn(features, batch_size=256):\n","    # Convert the inputs to a Dataset without labels.\n","    return tf.data.Dataset.from_tensor_slices(dict(features)).batch(batch_size)\n","# features = ['SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth']\n","features = ['blueTowerKills', 'blueFirstInhibitor', 'blueInhibitorKills', ]\n","predict = {}\n","\n","print(\"Please type numeric values as prompted.\")\n","for feature in features:\n","    val = input(feature + \": \")\n","\n","\n","predict[feature] = [float(val)]\n","\n","predictions = classifier.predict(input_fn=lambda: input_fn(predict))\n","for pred_dict in predictions:\n","    class_id = pred_dict['class_ids'][0]\n","    probability = pred_dict['probabilities'][class_id]\n","\n","    # print('Prediction is \"{}\" ({:.1f}%)'.format(\n","    #     [class_id], 100 * probability))"],"execution_count":111,"outputs":[{"output_type":"stream","text":["Please type numeric values as prompted.\n","blueTowerKills: 4\n","blueFirstInhibitor: 11\n","blueInhibitorKills: 32\n","INFO:tensorflow:Could not find trained model in model_dir: /tmp/tmpfms1kres, running initialization to predict.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Could not find trained model in model_dir: /tmp/tmpfms1kres, running initialization to predict.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Calling model_fn.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Calling model_fn.\n"],"name":"stderr"},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-111-23b994aac55e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_fn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0minput_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mpred_dict\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0mclass_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpred_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'class_ids'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mprobability\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpred_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'probabilities'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mclass_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/estimator.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, input_fn, predict_keys, hooks, checkpoint_path, yield_single_examples)\u001b[0m\n\u001b[1;32m    611\u001b[0m             input_fn, ModeKeys.PREDICT)\n\u001b[1;32m    612\u001b[0m         estimator_spec = self._call_model_fn(features, None, ModeKeys.PREDICT,\n\u001b[0;32m--> 613\u001b[0;31m                                              self.config)\n\u001b[0m\u001b[1;32m    614\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    615\u001b[0m         \u001b[0;31m# Call to warm_start has to be after model_fn is called.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/estimator.py\u001b[0m in \u001b[0;36m_call_model_fn\u001b[0;34m(self, features, labels, mode, config)\u001b[0m\n\u001b[1;32m   1168\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1169\u001b[0m     \u001b[0mlogging\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Calling model_fn.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1170\u001b[0;31m     \u001b[0mmodel_fn_results\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_model_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1171\u001b[0m     \u001b[0mlogging\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Done calling model_fn.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1172\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/canned/dnn.py\u001b[0m in \u001b[0;36m_model_fn\u001b[0;34m(features, labels, mode, config)\u001b[0m\n\u001b[1;32m    755\u001b[0m           \u001b[0mdropout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdropout\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m           \u001b[0mconfig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 757\u001b[0;31m           batch_norm=batch_norm)\n\u001b[0m\u001b[1;32m    758\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m     super(DNNClassifierV2, self).__init__(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/canned/dnn.py\u001b[0m in \u001b[0;36mdnn_model_fn_v2\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m    562\u001b[0m       \u001b[0mbatch_norm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_norm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    563\u001b[0m       \u001b[0mfeatures\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 564\u001b[0;31m       mode=mode)\n\u001b[0m\u001b[1;32m    565\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    566\u001b[0m   \u001b[0;31m# In TRAIN mode, create optimizer and assign global_step variable to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/canned/dnn.py\u001b[0m in \u001b[0;36m_dnn_model_fn_builder_v2\u001b[0;34m(units, hidden_units, feature_columns, activation_fn, dropout, batch_norm, features, mode)\u001b[0m\n\u001b[1;32m    498\u001b[0m       \u001b[0mbatch_norm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m       name='dnn')\n\u001b[0;32m--> 500\u001b[0;31m   \u001b[0mlogits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdnn_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    501\u001b[0m   \u001b[0mtrainable_variables\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdnn_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainable_variables\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m   \u001b[0mupdate_ops\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdnn_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer_v1.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    776\u001b[0m               with base_layer_utils.autocast_context_manager(\n\u001b[1;32m    777\u001b[0m                   self._compute_dtype):\n\u001b[0;32m--> 778\u001b[0;31m                 \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcall_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcast_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    779\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    780\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOperatorNotAllowedInGraphError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    263\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    264\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ag_error_metadata'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 265\u001b[0;31m           \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    266\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    267\u001b[0m           \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    /usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/canned/dnn.py:348 call  *\n        net = self._input_layer(features)\n    /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer_v1.py:778 __call__  **\n        outputs = call_fn(cast_inputs, *args, **kwargs)\n    /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/dense_features.py:145 call  **\n        self._state_manager)\n    /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:2916 get_dense_tensor\n        return transformation_cache.get(self, state_manager)\n    /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:2679 get\n        transformed = column.transform_feature(self, state_manager)\n    /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:2888 transform_feature\n        input_tensor = transformation_cache.get(self.key, state_manager)\n    /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:2671 get\n        raise ValueError('Feature {} is not in features dictionary.'.format(key))\n\n    ValueError: Feature blueFirstInhibitor is not in features dictionary.\n"]}]},{"cell_type":"code","metadata":{"id":"veNoDC3r0MZ9","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}